[{"/home/dteq/Documents/E-Commerce/eshop/pages/_app.tsx":"1","/home/dteq/Documents/E-Commerce/eshop/pages/_document.tsx":"2","/home/dteq/Documents/E-Commerce/eshop/pages/admin/dashboard.tsx":"3","/home/dteq/Documents/E-Commerce/eshop/pages/admin/orders.tsx":"4","/home/dteq/Documents/E-Commerce/eshop/pages/admin/product/[id].tsx":"5","/home/dteq/Documents/E-Commerce/eshop/pages/admin/products.tsx":"6","/home/dteq/Documents/E-Commerce/eshop/pages/admin/user/[id].tsx":"7","/home/dteq/Documents/E-Commerce/eshop/pages/admin/users.tsx":"8","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/orders.tsx":"9","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/products/[id]/index.tsx":"10","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/products/index.tsx":"11","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/summary.tsx":"12","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/upload.tsx":"13","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/users/[id]/index.tsx":"14","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/users/index.tsx":"15","/home/dteq/Documents/E-Commerce/eshop/pages/api/keys/google.tsx":"16","/home/dteq/Documents/E-Commerce/eshop/pages/api/keys/paypal.tsx":"17","/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/[id]/index.tsx":"18","/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/[id]/pay.tsx":"19","/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/history.tsx":"20","/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/index.tsx":"21","/home/dteq/Documents/E-Commerce/eshop/pages/api/products/[id]/index.tsx":"22","/home/dteq/Documents/E-Commerce/eshop/pages/api/products/[id]/reviews.tsx":"23","/home/dteq/Documents/E-Commerce/eshop/pages/api/products/categories.tsx":"24","/home/dteq/Documents/E-Commerce/eshop/pages/api/products/index.ts":"25","/home/dteq/Documents/E-Commerce/eshop/pages/api/seed.tsx":"26","/home/dteq/Documents/E-Commerce/eshop/pages/api/users/login.tsx":"27","/home/dteq/Documents/E-Commerce/eshop/pages/api/users/profile.tsx":"28","/home/dteq/Documents/E-Commerce/eshop/pages/api/users/register.tsx":"29","/home/dteq/Documents/E-Commerce/eshop/pages/cart.tsx":"30","/home/dteq/Documents/E-Commerce/eshop/pages/index.tsx":"31","/home/dteq/Documents/E-Commerce/eshop/pages/login.tsx":"32","/home/dteq/Documents/E-Commerce/eshop/pages/map.tsx":"33","/home/dteq/Documents/E-Commerce/eshop/pages/order/[id].tsx":"34","/home/dteq/Documents/E-Commerce/eshop/pages/order-history.tsx":"35","/home/dteq/Documents/E-Commerce/eshop/pages/payment.tsx":"36","/home/dteq/Documents/E-Commerce/eshop/pages/placeorder.tsx":"37","/home/dteq/Documents/E-Commerce/eshop/pages/product/[slug].tsx":"38","/home/dteq/Documents/E-Commerce/eshop/pages/profile.tsx":"39","/home/dteq/Documents/E-Commerce/eshop/pages/register.tsx":"40","/home/dteq/Documents/E-Commerce/eshop/pages/search.tsx":"41","/home/dteq/Documents/E-Commerce/eshop/pages/shipping.tsx":"42","/home/dteq/Documents/E-Commerce/eshop/components/CheckoutWizard.tsx":"43","/home/dteq/Documents/E-Commerce/eshop/components/Layout.tsx":"44","/home/dteq/Documents/E-Commerce/eshop/components/ProductItem.tsx":"45"},{"size":725,"mtime":1652144890500,"results":"46","hashOfConfig":"47"},{"size":1035,"mtime":1646525621267,"results":"48","hashOfConfig":"47"},{"size":7538,"mtime":1653070984373,"results":"49","hashOfConfig":"47"},{"size":5838,"mtime":1652491381576,"results":"50","hashOfConfig":"47"},{"size":16115,"mtime":1653071052725,"results":"51","hashOfConfig":"47"},{"size":8428,"mtime":1652492096540,"results":"52","hashOfConfig":"47"},{"size":7334,"mtime":1653052548032,"results":"53","hashOfConfig":"47"},{"size":6699,"mtime":1652492812476,"results":"54","hashOfConfig":"47"},{"size":545,"mtime":1652494711756,"results":"55","hashOfConfig":"47"},{"size":1525,"mtime":1652840154928,"results":"56","hashOfConfig":"47"},{"size":954,"mtime":1652710606660,"results":"57","hashOfConfig":"47"},{"size":1234,"mtime":1652494614124,"results":"58","hashOfConfig":"47"},{"size":1353,"mtime":1652670297920,"results":"59","hashOfConfig":"47"},{"size":1168,"mtime":1652494980764,"results":"60","hashOfConfig":"47"},{"size":463,"mtime":1652494803708,"results":"61","hashOfConfig":"47"},{"size":324,"mtime":1652903806510,"results":"62","hashOfConfig":"47"},{"size":323,"mtime":1651488517060,"results":"63","hashOfConfig":"47"},{"size":460,"mtime":1651989904484,"results":"64","hashOfConfig":"47"},{"size":797,"mtime":1652150331180,"results":"65","hashOfConfig":"47"},{"size":611,"mtime":1652195367700,"results":"66","hashOfConfig":"47"},{"size":656,"mtime":1651989919444,"results":"67","hashOfConfig":"47"},{"size":401,"mtime":1652467780582,"results":"68","hashOfConfig":"47"},{"size":2302,"mtime":1653071115081,"results":"69","hashOfConfig":"47"},{"size":406,"mtime":1652842936633,"results":"70","hashOfConfig":"47"},{"size":327,"mtime":1650924012180,"results":"71","hashOfConfig":"47"},{"size":507,"mtime":1650864927388,"results":"72","hashOfConfig":"47"},{"size":777,"mtime":1651027538428,"results":"73","hashOfConfig":"47"},{"size":896,"mtime":1653071216421,"results":"74","hashOfConfig":"47"},{"size":741,"mtime":1651097097256,"results":"75","hashOfConfig":"47"},{"size":5134,"mtime":1653071249389,"results":"76","hashOfConfig":"47"},{"size":1917,"mtime":1653071772025,"results":"77","hashOfConfig":"47"},{"size":3980,"mtime":1653079498978,"results":"78","hashOfConfig":"47"},{"size":4146,"mtime":1653056471360,"results":"79","hashOfConfig":"47"},{"size":13077,"mtime":1653101238732,"results":"80","hashOfConfig":"47"},{"size":5211,"mtime":1652193809936,"results":"81","hashOfConfig":"47"},{"size":3097,"mtime":1651801025328,"results":"82","hashOfConfig":"47"},{"size":8141,"mtime":1651914561504,"results":"83","hashOfConfig":"47"},{"size":7874,"mtime":1652476207404,"results":"84","hashOfConfig":"47"},{"size":8531,"mtime":1653059139892,"results":"85","hashOfConfig":"47"},{"size":6110,"mtime":1653059237664,"results":"86","hashOfConfig":"47"},{"size":8603,"mtime":1653101150840,"results":"87","hashOfConfig":"47"},{"size":7542,"mtime":1653101188960,"results":"88","hashOfConfig":"47"},{"size":577,"mtime":1651372061204,"results":"89","hashOfConfig":"47"},{"size":8771,"mtime":1653060373540,"results":"90","hashOfConfig":"47"},{"size":1044,"mtime":1652432520280,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ygf77g",{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dteq/Documents/E-Commerce/eshop/pages/_app.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/_document.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/admin/dashboard.tsx",["244"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport {\n  CircularProgress,\n  Grid,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  ListItemText,\n  CardContent,\n  CardActions,\n} from '@material-ui/core';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// import { Bar } from 'react-chartjs-2';\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\nimport { getError } from '../../utils/error';\nimport { Store } from '../../utils/Store';\nimport Layout from '../../components/Layout';\nimport useStyles from '../../utils/styles';\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, summary: action.payload, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    default:\n      state;\n  }\n}\n\nfunction AdminDashboard() {\n  const { state } = useContext(Store);\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  const [{ loading, error, summary }, dispatch] = useReducer(reducer, {\n    loading: true,\n    summary: { salesData: [] },\n    error: '',\n  });\n\n  useEffect(() => {\n    if (!userInfo) {\n      router.push('/login');\n    }\n    const fetchData = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await axios.get(`/api/admin/summary`, {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n      }\n    };\n    fetchData();\n  }, []);\n  return (\n    <Layout title=\"Admin Dashboard\">\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/admin/dashboard\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"Admin Dashboard\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/orders\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Orders\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/products\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Products\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/users\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Users\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                {loading ? (\n                  <CircularProgress />\n                ) : error ? (\n                  <Typography className={classes.error}>{error}</Typography>\n                ) : (\n                  <Grid container spacing={5}>\n                    <Grid item md={3}>\n                      <Card raised>\n                        <CardContent>\n                          <Typography variant=\"h1\">\n                            ${summary.ordersPrice}\n                          </Typography>\n                          <Typography>Sales</Typography>\n                        </CardContent>\n                        <CardActions>\n                          <NextLink href=\"/admin/orders\" passHref>\n                            <Button size=\"small\" color=\"primary\">\n                              View sales\n                            </Button>\n                          </NextLink>\n                        </CardActions>\n                      </Card>\n                    </Grid>\n                    <Grid item md={3}>\n                      <Card raised>\n                        <CardContent>\n                          <Typography variant=\"h1\">\n                            {summary.ordersCount}\n                          </Typography>\n                          <Typography>Orders</Typography>\n                        </CardContent>\n                        <CardActions>\n                          <NextLink href=\"/admin/orders\" passHref>\n                            <Button size=\"small\" color=\"primary\">\n                              View orders\n                            </Button>\n                          </NextLink>\n                        </CardActions>\n                      </Card>\n                    </Grid>\n                    <Grid item md={3}>\n                      <Card raised>\n                        <CardContent>\n                          <Typography variant=\"h1\">\n                            {summary.productsCount}\n                          </Typography>\n                          <Typography>Products</Typography>\n                        </CardContent>\n                        <CardActions>\n                          <NextLink href=\"/admin/products\" passHref>\n                            <Button size=\"small\" color=\"primary\">\n                              View products\n                            </Button>\n                          </NextLink>\n                        </CardActions>\n                      </Card>\n                    </Grid>\n                    <Grid item md={3}>\n                      <Card raised>\n                        <CardContent>\n                          <Typography variant=\"h1\">\n                            {summary.usersCount}\n                          </Typography>\n                          <Typography>Users</Typography>\n                        </CardContent>\n                        <CardActions>\n                          <NextLink href=\"/admin/users\" passHref>\n                            <Button size=\"small\" color=\"primary\">\n                              View users\n                            </Button>\n                          </NextLink>\n                        </CardActions>\n                      </Card>\n                    </Grid>\n                  </Grid>\n                )}\n              </ListItem>\n              <ListItem>\n                <Typography component=\"h1\" variant=\"h1\">\n                  Sales Chart\n                </Typography>\n              </ListItem>\n              <ListItem>\n                {/* <Bar\n                  data={{\n                    labels: summary.salesData.map((x: X) => x._id),\n                    datasets: [\n                      {\n                        label: 'Sales',\n                        backgroundColor: 'rgba(162, 222, 208, 1)',\n                        data: summary.salesData.map((x: X) => x.totalSales),\n                      },\n                    ],\n                  }}\n                  options={{\n                    legend: { display: true, position: 'right' },\n                  }}\n                /> */}\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default dynamic(() => Promise.resolve(AdminDashboard), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/admin/orders.tsx",["245"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport {\n  CircularProgress,\n  Grid,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  ListItemText,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@material-ui/core';\nimport { getError } from '../../utils/error';\nimport { Store } from '../../utils/Store';\nimport Layout from '../../components/Layout';\nimport useStyles from '../../utils/styles';\ninterface User {\n  name: string;\n}\ninterface IOrder {\n  _id: string;\n  createdAt: string;\n  isDelivered: boolean;\n  isPaid: boolean;\n  paidAt: string;\n  user: User;\n  totalPrice: number;\n  deliveredAt: string;\n}\n\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, orders: action.payload, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    default:\n      state;\n  }\n}\n\nfunction AdminOrders() {\n  const { state } = useContext(Store);\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  const [{ loading, error, orders }, dispatch] = useReducer(reducer, {\n    loading: true,\n    orders: [],\n    error: '',\n  });\n\n  useEffect(() => {\n    if (!userInfo) {\n      router.push('/login');\n    }\n    const fetchData = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await axios.get(`/api/admin/orders`, {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n      }\n    };\n    fetchData();\n  }, []);\n  return (\n    <Layout title=\"Orders\">\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/admin/dashboard\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Admin Dashboard\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/orders\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"Orders\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/products\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Products\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/users\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Users\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h1\" variant=\"h1\">\n                  Orders\n                </Typography>\n              </ListItem>\n\n              <ListItem>\n                {loading ? (\n                  <CircularProgress />\n                ) : error ? (\n                  <Typography className={classes.error}>{error}</Typography>\n                ) : (\n                  <TableContainer>\n                    <Table>\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>ID</TableCell>\n                          <TableCell>USER</TableCell>\n                          <TableCell>DATE</TableCell>\n                          <TableCell>TOTAL</TableCell>\n                          <TableCell>PAID</TableCell>\n                          <TableCell>DELIVERED</TableCell>\n                          <TableCell>ACTION</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {orders.map((order: IOrder) => (\n                          <TableRow key={order._id}>\n                            <TableCell>{order._id.substring(20, 24)}</TableCell>\n                            <TableCell>\n                              {order.user ? order.user.name : 'DELETED USER'}\n                            </TableCell>\n                            <TableCell>{order.createdAt}</TableCell>\n                            <TableCell>${order.totalPrice}</TableCell>\n                            <TableCell>\n                              {order.isPaid\n                                ? `paid at ${order.paidAt}`\n                                : 'not paid'}\n                            </TableCell>\n                            <TableCell>\n                              {order.isDelivered\n                                ? `delivered at ${order.deliveredAt}`\n                                : 'not delivered'}\n                            </TableCell>\n                            <TableCell>\n                              <NextLink href={`/order/${order._id}`} passHref>\n                                <Button variant=\"contained\">Details</Button>\n                              </NextLink>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default dynamic(() => Promise.resolve(AdminOrders), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/admin/product/[id].tsx",["246"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useEffect, useContext, useReducer, useState } from 'react';\nimport {\n  Grid,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  ListItemText,\n  TextField,\n  CircularProgress,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core';\nimport { getError } from '../../../utils/error';\nimport { Store } from '../../../utils/Store';\nimport Layout from '../../../components/Layout';\nimport useStyles from '../../../utils/styles';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useSnackbar } from 'notistack';\n\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    case 'UPDATE_REQUEST':\n      return { ...state, loadingUpdate: true, errorUpdate: '' };\n    case 'UPDATE_SUCCESS':\n      return { ...state, loadingUpdate: false, errorUpdate: '' };\n    case 'UPDATE_FAIL':\n      return { ...state, loadingUpdate: false, errorUpdate: action.payload };\n    case 'UPLOAD_REQUEST':\n      return { ...state, loadingUpload: true, errorUpload: '' };\n    case 'UPLOAD_SUCCESS':\n      return {\n        ...state,\n        loadingUpload: false,\n        errorUpload: '',\n      };\n    case 'UPLOAD_FAIL':\n      return { ...state, loadingUpload: false, errorUpload: action.payload };\n\n    default:\n      return state;\n  }\n}\n\nfunction ProductEdit({ params }: any) {\n  const productId = params.id;\n  const { state } = useContext(Store);\n  const [{ loading, error, loadingUpdate, loadingUpload }, dispatch] =\n    useReducer(reducer, {\n      loading: true,\n      error: '',\n    });\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  useEffect((): any => {\n    if (!userInfo) {\n      return router.push('/login');\n    } else {\n      const fetchData = async () => {\n        try {\n          dispatch({ type: 'FETCH_REQUEST' });\n          const { data } = await axios.get(`/api/admin/products/${productId}`, {\n            headers: { authorization: `Bearer ${userInfo.token}` },\n          });\n          dispatch({ type: 'FETCH_SUCCESS' });\n          setValue('name', data.name);\n          setValue('slug', data.slug);\n          setValue('price', data.price);\n          setValue('image', data.image);\n          setValue('featuredImage', data.featuredImage);\n          setIsFeatured(data.isFeatured);\n          setValue('category', data.category);\n          setValue('countInStock', data.countInStock);\n          setValue('description', data.description);\n        } catch (err) {\n          dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n        }\n      };\n      fetchData();\n    }\n  }, []);\n  const uploadHandler = async (e: any, imageField = 'image') => {\n    const file = e.target.files[0];\n    const bodyFormData = new FormData();\n    bodyFormData.append('file', file);\n    try {\n      dispatch({ type: 'UPLOAD_REQUEST' });\n      const { data } = await axios.post('/api/admin/upload', bodyFormData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          authorization: `Bearer ${userInfo.token}`,\n        },\n      });\n      dispatch({ type: 'UPLOAD_SUCCESS' });\n      setValue(imageField, data.secure_url);\n      enqueueSnackbar('File uploaded successfully', { variant: 'success' });\n    } catch (err) {\n      dispatch({ type: 'UPLOAD_FAIL', payload: getError(err) });\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n\n  const submitHandler = async ({\n    name,\n    slug,\n    price,\n    category,\n    image,\n    countInStock,\n    description,\n  }: any) => {\n    closeSnackbar();\n    try {\n      dispatch({ type: 'UPDATE_REQUEST' });\n      await axios.put(\n        `/api/admin/products/${productId}`,\n        {\n          name,\n          slug,\n          price,\n          category,\n          image,\n          isFeatured,\n          countInStock,\n          description,\n        },\n        { headers: { authorization: `Bearer ${userInfo.token}` } }\n      );\n      dispatch({ type: 'UPDATE_SUCCESS' });\n      enqueueSnackbar('Product updated successfully', { variant: 'success' });\n      router.push('/admin/products');\n    } catch (err) {\n      dispatch({ type: 'UPDATE_FAIL', payload: getError(err) });\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n\n  const [isFeatured, setIsFeatured] = useState(false);\n\n  return (\n    <Layout title={`Edit Product ${productId}`}>\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/admin/dashboard\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Admin Dashboard\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/orders\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Orders\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/products\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"Products\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/users\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Users\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h1\" variant=\"h1\">\n                  Edit Product {productId}\n                </Typography>\n              </ListItem>\n              <ListItem>\n                {loading && <CircularProgress></CircularProgress>}\n                {error && (\n                  <Typography className={classes.error}>{error}</Typography>\n                )}\n              </ListItem>\n              <ListItem>\n                <form\n                  onSubmit={handleSubmit(submitHandler)}\n                  className={classes.form}\n                >\n                  <List>\n                    <ListItem>\n                      <Controller\n                        name=\"name\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"name\"\n                            label=\"Name\"\n                            error={Boolean(errors.name)}\n                            helperText={errors.name ? 'Name is required' : ''}\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"slug\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"slug\"\n                            label=\"Slug\"\n                            error={Boolean(errors.slug)}\n                            helperText={errors.slug ? 'Slug is required' : ''}\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"price\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"price\"\n                            label=\"Price\"\n                            error={Boolean(errors.price)}\n                            helperText={errors.price ? 'Price is required' : ''}\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"image\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"image\"\n                            label=\"Image\"\n                            error={Boolean(errors.image)}\n                            helperText={errors.image ? 'Image is required' : ''}\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Button variant=\"contained\" component=\"label\">\n                        Upload File\n                        <input type=\"file\" onChange={uploadHandler} hidden />\n                      </Button>\n                      {loadingUpload && <CircularProgress />}\n                    </ListItem>\n                    <ListItem>\n                      <FormControlLabel\n                        label=\"Is Featured\"\n                        control={\n                          <Checkbox\n                            onClick={(e: any) =>\n                              setIsFeatured(e.target.checked)\n                            }\n                            checked={isFeatured}\n                            name=\"isFeatured\"\n                          />\n                        }\n                      ></FormControlLabel>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"featuredImage\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"featuredImage\"\n                            label=\"Featured Image\"\n                            error={Boolean(errors.image)}\n                            helperText={\n                              errors.image ? 'Featured Image is required' : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Button variant=\"contained\" component=\"label\">\n                        Upload File\n                        <input\n                          type=\"file\"\n                          onChange={(e) => uploadHandler(e, 'featuredImage')}\n                          hidden\n                        />\n                      </Button>\n                      {loadingUpload && <CircularProgress />}\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"category\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"category\"\n                            label=\"Category\"\n                            error={Boolean(errors.category)}\n                            helperText={\n                              errors.category ? 'Category is required' : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n\n                    <ListItem>\n                      <Controller\n                        name=\"countInStock\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"countInStock\"\n                            label=\"Count in stock\"\n                            error={Boolean(errors.countInStock)}\n                            helperText={\n                              errors.countInStock\n                                ? 'Count in stock is required'\n                                : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"description\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            multiline\n                            id=\"description\"\n                            label=\"Description\"\n                            error={Boolean(errors.description)}\n                            helperText={\n                              errors.description\n                                ? 'Description is required'\n                                : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n\n                    <ListItem>\n                      <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        fullWidth\n                        color=\"primary\"\n                      >\n                        Update\n                      </Button>\n                      {loadingUpdate && <CircularProgress />}\n                    </ListItem>\n                  </List>\n                </form>\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport async function getServerSideProps({ params }: any) {\n  return {\n    props: { params },\n  };\n}\n\nexport default dynamic(() => Promise.resolve(ProductEdit), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/admin/products.tsx",["247"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport { IProduct } from '../../utils/Store';\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport {\n  CircularProgress,\n  Grid,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  ListItemText,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@material-ui/core';\nimport { getError } from '../../utils/error';\nimport { Store } from '../../utils/Store';\nimport Layout from '../../components/Layout';\nimport useStyles from '../../utils/styles';\nimport { useSnackbar } from 'notistack';\n\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, products: action.payload, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    case 'CREATE_REQUEST':\n      return { ...state, loadingCreate: true };\n    case 'CREATE_SUCCESS':\n      return { ...state, loadingCreate: false };\n    case 'CREATE_FAIL':\n      return { ...state, loadingCreate: false };\n    case 'DELETE_REQUEST':\n      return { ...state, loadingDelete: true };\n    case 'DELETE_SUCCESS':\n      return { ...state, loadingDelete: false, successDelete: true };\n    case 'DELETE_FAIL':\n      return { ...state, loadingDelete: false };\n    case 'DELETE_RESET':\n      return { ...state, loadingDelete: false, successDelete: false };\n    default:\n      state;\n  }\n}\n\nfunction AdminProdcuts() {\n  const { state } = useContext(Store);\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  const [\n    { loading, error, products, loadingCreate, successDelete, loadingDelete },\n    dispatch,\n  ] = useReducer(reducer, {\n    loading: true,\n    products: [],\n    error: '',\n  });\n\n  useEffect(() => {\n    if (!userInfo) {\n      router.push('/login');\n    }\n    const fetchData = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await axios.get(`/api/admin/products`, {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n      }\n    };\n    if (successDelete) {\n      dispatch({ type: 'DELETE_RESET' });\n    } else {\n      fetchData();\n    }\n  }, [successDelete]);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const createHandler = async () => {\n    if (!window.confirm('Are you sure?')) {\n      return;\n    }\n    try {\n      dispatch({ type: 'CREATE_REQUEST' });\n      const { data } = await axios.post(\n        `/api/admin/products`,\n        {},\n        {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        }\n      );\n      dispatch({ type: 'CREATE_SUCCESS' });\n      enqueueSnackbar('Product created successfully', { variant: 'success' });\n      router.push(`/admin/product/${data.product._id}`);\n    } catch (err) {\n      dispatch({ type: 'CREATE_FAIL' });\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  const deleteHandler = async (productId: string) => {\n    if (!window.confirm('Are you sure?')) {\n      return;\n    }\n    try {\n      dispatch({ type: 'DELETE_REQUEST' });\n      await axios.delete(`/api/admin/products/${productId}`, {\n        headers: { authorization: `Bearer ${userInfo.token}` },\n      });\n      dispatch({ type: 'DELETE_SUCCESS' });\n      enqueueSnackbar('Product deleted successfully', { variant: 'success' });\n    } catch (err) {\n      dispatch({ type: 'DELETE_FAIL' });\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  return (\n    <Layout title=\"Products\">\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/admin/dashboard\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Admin Dashboard\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/orders\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Orders\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/products\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"Products\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/users\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Users\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Grid container alignItems=\"center\">\n                  <Grid item xs={6}>\n                    <Typography component=\"h1\" variant=\"h1\">\n                      Products\n                    </Typography>\n                    {loadingDelete && <CircularProgress />}\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Button\n                      onClick={createHandler}\n                      color=\"primary\"\n                      variant=\"contained\"\n                    >\n                      Create\n                    </Button>\n                    {loadingCreate && <CircularProgress />}\n                  </Grid>\n                </Grid>\n              </ListItem>\n\n              <ListItem>\n                {loading ? (\n                  <CircularProgress />\n                ) : error ? (\n                  <Typography className={classes.error}>{error}</Typography>\n                ) : (\n                  <TableContainer>\n                    <Table>\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>ID</TableCell>\n                          <TableCell>NAME</TableCell>\n                          <TableCell>PRICE</TableCell>\n                          <TableCell>CATEGORY</TableCell>\n                          <TableCell>COUNT</TableCell>\n                          <TableCell>RATING</TableCell>\n                          <TableCell>ACTIONS</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {products.map((product: IProduct) => (\n                          <TableRow key={product._id}>\n                            <TableCell>\n                              {product._id.substring(20, 24)}\n                            </TableCell>\n                            <TableCell>{product.name}</TableCell>\n                            <TableCell>${product.price}</TableCell>\n                            <TableCell>{product.category}</TableCell>\n                            <TableCell>{product.countInStock}</TableCell>\n                            <TableCell>{product.rating}</TableCell>\n                            <TableCell>\n                              <NextLink\n                                href={`/admin/product/${product._id}`}\n                                passHref\n                              >\n                                <Button size=\"small\" variant=\"contained\">\n                                  Edit\n                                </Button>\n                              </NextLink>{' '}\n                              <Button\n                                onClick={() => deleteHandler(product._id)}\n                                size=\"small\"\n                                variant=\"contained\"\n                              >\n                                Delete\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default dynamic(() => Promise.resolve(AdminProdcuts), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/admin/user/[id].tsx",["248"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useEffect, useContext, useReducer, useState } from 'react';\nimport {\n  Grid,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  ListItemText,\n  TextField,\n  CircularProgress,\n  Checkbox,\n  FormControlLabel,\n} from '@material-ui/core';\nimport { getError } from '../../../utils/error';\nimport { Store } from '../../../utils/Store';\nimport Layout from '../../../components/Layout';\nimport useStyles from '../../../utils/styles';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useSnackbar } from 'notistack';\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    case 'UPDATE_REQUEST':\n      return { ...state, loadingUpdate: true, errorUpdate: '' };\n    case 'UPDATE_SUCCESS':\n      return { ...state, loadingUpdate: false, errorUpdate: '' };\n    case 'UPDATE_FAIL':\n      return { ...state, loadingUpdate: false, errorUpdate: action.payload };\n    case 'UPLOAD_REQUEST':\n      return { ...state, loadingUpload: true, errorUpload: '' };\n    case 'UPLOAD_SUCCESS':\n      return {\n        ...state,\n        loadingUpload: false,\n        errorUpload: '',\n      };\n    case 'UPLOAD_FAIL':\n      return { ...state, loadingUpload: false, errorUpload: action.payload };\n\n    default:\n      return state;\n  }\n}\n\nfunction UserEdit({ params }: any) {\n  const userId = params.id;\n  const { state } = useContext(Store);\n  const [{ loading, error, loadingUpdate }, dispatch] = useReducer(reducer, {\n    loading: true,\n    error: '',\n  });\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  useEffect((): any => {\n    if (!userInfo) {\n      return router.push('/login');\n    } else {\n      const fetchData = async () => {\n        try {\n          dispatch({ type: 'FETCH_REQUEST' });\n          const { data } = await axios.get(`/api/admin/users/${userId}`, {\n            headers: { authorization: `Bearer ${userInfo.token}` },\n          });\n          setIsAdmin(data.isAdmin);\n          dispatch({ type: 'FETCH_SUCCESS' });\n          setValue('name', data.name);\n        } catch (err) {\n          dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n        }\n      };\n      fetchData();\n    }\n  }, []);\n\n  const submitHandler = async (name: any) => {\n    closeSnackbar();\n    try {\n      dispatch({ type: 'UPDATE_REQUEST' });\n      await axios.put(\n        `/api/admin/users/${userId}`,\n        {\n          name,\n          isAdmin,\n        },\n        { headers: { authorization: `Bearer ${userInfo.token}` } }\n      );\n      dispatch({ type: 'UPDATE_SUCCESS' });\n      enqueueSnackbar('User updated successfully', { variant: 'success' });\n      router.push('/admin/users');\n    } catch (err) {\n      dispatch({ type: 'UPDATE_FAIL', payload: getError(err) });\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  return (\n    <Layout title={`Edit User ${userId}`}>\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/admin/dashboard\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Admin Dashboard\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/orders\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Orders\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/products\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Products\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/users\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"Users\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h1\" variant=\"h1\">\n                  Edit User {userId}\n                </Typography>\n              </ListItem>\n              <ListItem>\n                {loading && <CircularProgress></CircularProgress>}\n                {error && (\n                  <Typography className={classes.error}>{error}</Typography>\n                )}\n              </ListItem>\n              <ListItem>\n                <form\n                  onSubmit={handleSubmit(submitHandler)}\n                  className={classes.form}\n                >\n                  <List>\n                    <ListItem>\n                      <Controller\n                        name=\"name\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"name\"\n                            label=\"Name\"\n                            error={Boolean(errors.name)}\n                            helperText={errors.name ? 'Name is required' : ''}\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <FormControlLabel\n                        label=\"Is Admin\"\n                        control={\n                          <Checkbox\n                            onClick={(e: any) => setIsAdmin(e.target.checked)}\n                            checked={isAdmin}\n                            name=\"isAdmin\"\n                          />\n                        }\n                      ></FormControlLabel>\n                    </ListItem>\n                    <ListItem>\n                      <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        fullWidth\n                        color=\"primary\"\n                      >\n                        Update\n                      </Button>\n                      {loadingUpdate && <CircularProgress />}\n                    </ListItem>\n                  </List>\n                </form>\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport async function getServerSideProps({ params }: any) {\n  return {\n    props: { params },\n  };\n}\n\nexport default dynamic(() => Promise.resolve(UserEdit), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/admin/users.tsx",["249"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport {\n  CircularProgress,\n  Grid,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  ListItemText,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@material-ui/core';\nimport { getError } from '../../utils/error';\nimport { Store } from '../../utils/Store';\nimport Layout from '../../components/Layout';\nimport useStyles from '../../utils/styles';\nimport { useSnackbar } from 'notistack';\ninterface User {\n  _id: string;\n  name: string;\n  isAdmin: boolean;\n  email: string;\n}\n\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, users: action.payload, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n\n    case 'DELETE_REQUEST':\n      return { ...state, loadingDelete: true };\n    case 'DELETE_SUCCESS':\n      return { ...state, loadingDelete: false, successDelete: true };\n    case 'DELETE_FAIL':\n      return { ...state, loadingDelete: false };\n    case 'DELETE_RESET':\n      return { ...state, loadingDelete: false, successDelete: false };\n    default:\n      state;\n  }\n}\n\nfunction AdminUsers() {\n  const { state } = useContext(Store);\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  const [{ loading, error, users, successDelete, loadingDelete }, dispatch] =\n    useReducer(reducer, {\n      loading: true,\n      users: [],\n      error: '',\n    });\n\n  useEffect(() => {\n    if (!userInfo) {\n      router.push('/login');\n    }\n    const fetchData = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await axios.get(`/api/admin/users`, {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n      }\n    };\n    if (successDelete) {\n      dispatch({ type: 'DELETE_RESET' });\n    } else {\n      fetchData();\n    }\n  }, [successDelete]);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const deleteHandler = async (userId: string) => {\n    if (!window.confirm('Are you sure?')) {\n      return;\n    }\n    try {\n      dispatch({ type: 'DELETE_REQUEST' });\n      await axios.delete(`/api/admin/users/${userId}`, {\n        headers: { authorization: `Bearer ${userInfo.token}` },\n      });\n      dispatch({ type: 'DELETE_SUCCESS' });\n      enqueueSnackbar('User deleted successfully', { variant: 'success' });\n    } catch (err) {\n      dispatch({ type: 'DELETE_FAIL' });\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  return (\n    <Layout title=\"Users\">\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/admin/dashboard\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Admin Dashboard\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/orders\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Orders\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/products\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Products\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/admin/users\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"Users\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h1\" variant=\"h1\">\n                  Users\n                </Typography>\n                {loadingDelete && <CircularProgress />}\n              </ListItem>\n\n              <ListItem>\n                {loading ? (\n                  <CircularProgress />\n                ) : error ? (\n                  <Typography className={classes.error}>{error}</Typography>\n                ) : (\n                  <TableContainer>\n                    <Table>\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>ID</TableCell>\n                          <TableCell>NAME</TableCell>\n                          <TableCell>EMAIL</TableCell>\n                          <TableCell>ISADMIN</TableCell>\n                          <TableCell>ACTIONS</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {users.map((user: User) => (\n                          <TableRow key={user._id}>\n                            <TableCell>{user._id.substring(20, 24)}</TableCell>\n                            <TableCell>{user.name}</TableCell>\n                            <TableCell>{user.email}</TableCell>\n                            <TableCell>{user.isAdmin ? 'YES' : 'NO'}</TableCell>\n                            <TableCell>\n                              <NextLink\n                                href={`/admin/user/${user._id}`}\n                                passHref\n                              >\n                                <Button size=\"small\" variant=\"contained\">\n                                  Edit\n                                </Button>\n                              </NextLink>{' '}\n                              <Button\n                                onClick={() => deleteHandler(user._id)}\n                                size=\"small\"\n                                variant=\"contained\"\n                              >\n                                Delete\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default dynamic(() => Promise.resolve(AdminUsers), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/orders.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/products/[id]/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/products/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/summary.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/upload.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/users/[id]/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/admin/users/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/keys/google.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/keys/paypal.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/[id]/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/[id]/pay.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/history.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/orders/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/products/[id]/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/products/[id]/reviews.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/products/categories.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/products/index.ts",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/seed.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/users/login.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/users/profile.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/api/users/register.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/cart.tsx",["250"],[],"import React, { useContext } from 'react';\nimport dynamic from 'next/dynamic';\nimport Layout from '../components/Layout';\nimport { Store, IProduct } from '../utils/Store';\nimport NextLink from 'next/link';\nimport {\n  Grid,\n  TableContainer,\n  Table,\n  Typography,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Link,\n  Select,\n  MenuItem,\n  Button,\n  Card,\n  List,\n  ListItem,\n} from '@material-ui/core';\nimport axios from 'axios';\nimport { ActionKindPayCart } from '../utils/Store';\nimport { useRouter } from 'next/router';\n\nfunction CartScreen() {\n  const router = useRouter();\n  const { state, dispatch } = useContext(Store);\n  const {\n    cart: { cartItems },\n  } = state;\n\n  const updateCartHandler = async (item: IProduct, quantity: number) => {\n    const { data } = await axios.get(`/api/products/${item._id}`);\n    if (data.countInStock < quantity) {\n      window.alert('Sorry. Product is out of stock');\n      return;\n    }\n    dispatch({\n      type: ActionKindPayCart.CART_ADD_ITEM,\n      payload: { ...item, quantity },\n    });\n  };\n  const removeItemHandler = (item: IProduct) => {\n    dispatch({ type: ActionKindPayCart.CART_REMOVE_ITEM, payload: item });\n  };\n  const checkoutHandler = () => {\n    router.push('/shipping');\n  };\n  return (\n    <Layout title=\"Shopping Cart\">\n      <Typography component=\"h1\" variant=\"h1\">\n        Shopping Cart\n      </Typography>\n      {cartItems.length === 0 ? (\n        <div>\n          Cart is empty.{' '}\n          <NextLink href=\"/\" passHref>\n            <Link>Go Shopping</Link>\n          </NextLink>\n        </div>\n      ) : (\n        <Grid container spacing={1}>\n          <Grid item md={9} xs={12}>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Image</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell align=\"right\">Quantity</TableCell>\n                    <TableCell align=\"right\">Price</TableCell>\n                    <TableCell align=\"right\">Action</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {cartItems.map((item) => (\n                    <TableRow key={item._id}>\n                      <TableCell>\n                        <NextLink href={`/product/${item.slug}`} passHref>\n                          <Link>\n                            <img\n                              src={item.image_url}\n                              alt={item.name}\n                              style={{ height: 50, width: 50 }}\n                            ></img>\n                          </Link>\n                        </NextLink>\n                      </TableCell>\n\n                      <TableCell>\n                        <NextLink href={`/product/${item.slug}`} passHref>\n                          <Link>\n                            <Typography>{item.name}</Typography>\n                          </Link>\n                        </NextLink>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Select\n                          value={item.quantity}\n                          onChange={(e: any) =>\n                            updateCartHandler(item, e.target.value)\n                          }\n                        >\n                          {[...Array(item.countInStock).keys()].map((x) => (\n                            <MenuItem key={x + 1} value={x + 1}>\n                              {x + 1}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </TableCell>\n                      <TableCell align=\"right\">&#8358;{item.price}</TableCell>\n                      <TableCell align=\"right\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          onClick={() => removeItemHandler(item)}\n                        >\n                          x\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item md={3} xs={12}>\n            <Card>\n              <List>\n                <ListItem>\n                  <Typography variant=\"h2\">\n                    Subtotal ({cartItems.reduce((a, c) => a + c.quantity, 0)}{' '}\n                    items) : &#8358;\n                    {cartItems.reduce((a, c) => a + c.quantity * c.price, 0)}\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Button\n                    onClick={checkoutHandler}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                  >\n                    Check Out\n                  </Button>\n                </ListItem>\n              </List>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n    </Layout>\n  );\n}\nexport default dynamic(() => Promise.resolve(CartScreen), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/index.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/login.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/map.tsx",["251"],[],"import { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport useStyles from '../utils/styles';\nimport { ActionKindPayAny, Store } from '../utils/Store';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { useSnackbar } from 'notistack';\nimport { CircularProgress } from '@material-ui/core';\nimport {\n  GoogleMap,\n  LoadScript,\n  Marker,\n  StandaloneSearchBox,\n} from '@react-google-maps/api';\nimport { getError } from '../utils/error';\n\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\n\nfunction Map() {\n  const router = useRouter();\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { state, dispatch } = useContext(Store);\n  const { userInfo } = state;\n\n  const [googleApiKey, setGoogleApiKey] = useState('');\n  useEffect(() => {\n    const fetchGoogleApiKey = async () => {\n      try {\n        const { data } = await axios('/api/keys/google', {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        setGoogleApiKey(data);\n        getUserCurrentLocation();\n      } catch (err) {\n        enqueueSnackbar(getError(err), { variant: 'error' });\n      }\n    };\n    fetchGoogleApiKey();\n  }, []);\n\n  const [center, setCenter] = useState(defaultLocation);\n  const [location, setLocation] = useState(center);\n\n  const getUserCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      enqueueSnackbar('Geolocation is not supported by this browser', {\n        variant: 'error',\n      });\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      });\n    }\n  };\n\n  const mapRef: any = useRef(null);\n  const placeRef: any = useRef(null);\n  const markerRef = useRef(null);\n\n  const onLoad = (map: any) => {\n    mapRef.current = map;\n  };\n  const onIdle = () => {\n    setLocation({\n      lat: mapRef.current.center.lat(),\n      lng: mapRef.current.center.lng(),\n    });\n  };\n\n  const onLoadPlaces = (place: any) => {\n    placeRef.current = place;\n  };\n  const onPlacesChanged = () => {\n    const place = placeRef.current.getPlaces()[0].geometry.location;\n    setCenter({ lat: place.lat(), lng: place.lng() });\n    setLocation({ lat: place.lat(), lng: place.lng() });\n  };\n  const onConfirm = () => {\n    const places = placeRef.current.getPlaces();\n    if (places && places.length === 1) {\n      dispatch({\n        type: ActionKindPayAny.SAVE_SHIPPING_ADDRESS_MAP_LOCATION,\n        payload: {\n          lat: location.lat,\n          lng: location.lng,\n          address: places[0].formatted_address,\n          name: places[0].name,\n          vicinity: places[0].vicinity,\n          googleAddressId: places[0].id,\n        },\n      });\n      enqueueSnackbar('location selected successfully', {\n        variant: 'success',\n      });\n      router.push('/shipping');\n    }\n  };\n  const onMarkerLoad = (marker: any) => {\n    markerRef.current = marker;\n  };\n  return googleApiKey ? (\n    <div className={classes.fullContainer}>\n      <LoadScript googleMapsApiKey={googleApiKey}>\n        <GoogleMap\n          id=\"sample-map\"\n          mapContainerStyle={{ height: '100%', width: '100%' }}\n          center={center}\n          zoom={15}\n          onLoad={onLoad}\n          onIdle={onIdle}\n        >\n          <StandaloneSearchBox\n            onLoad={onLoadPlaces}\n            onPlacesChanged={onPlacesChanged}\n          >\n            <div className={classes.mapInputBox}>\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\n              <button type=\"button\" className=\"primary\" onClick={onConfirm}>\n                Confirm\n              </button>\n            </div>\n          </StandaloneSearchBox>\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  ) : (\n    <CircularProgress />\n  );\n}\n\nexport default dynamic(() => Promise.resolve(Map), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/order/[id].tsx",["252","253"],[],"import React, { useContext, useEffect, useReducer } from 'react';\nimport dynamic from 'next/dynamic';\nimport Layout from '../../components/Layout';\nimport { IProduct, Store } from '../../utils/Store';\nimport NextLink from 'next/link';\nimport {\n  Grid,\n  TableContainer,\n  Table,\n  Typography,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Link,\n  CircularProgress,\n  Button,\n  Card,\n  List,\n  ListItem,\n} from '@material-ui/core';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport useStyles from '../../utils/styles';\nimport { useSnackbar } from 'notistack';\nimport { getError } from '../../utils/error';\nimport { PayPalButtons, usePayPalScriptReducer } from '@paypal/react-paypal-js';\n\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, order: action.payload, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    case 'PAY_REQUEST':\n      return { ...state, loadingPay: true };\n    case 'PAY_SUCCESS':\n      return { ...state, loadingPay: false, successPay: true };\n    case 'PAY_FAIL':\n      return { ...state, loadingPay: false, errorPay: action.payload };\n    case 'PAY_RESET':\n      return { ...state, loadingPay: false, successPay: false, errorPay: '' };\n    case 'DELIVER_REQUEST':\n      return { ...state, loadingDeliver: true };\n    case 'DELIVER_SUCCESS':\n      return { ...state, loadingDeliver: false, successDeliver: true };\n    case 'DELIVER_FAIL':\n      return { ...state, loadingDeliver: false, errorDeliver: action.payload };\n    case 'DELIVER_RESET':\n      return {\n        ...state,\n        loadingDeliver: false,\n        successDeliver: false,\n        errorDeliver: '',\n      };\n    default:\n      state;\n  }\n}\nfunction Order({ params }: any) {\n  const orderId = params.id;\n  const [{ isPending }, paypalDispatch] = usePayPalScriptReducer();\n  const classes = useStyles();\n  const router = useRouter();\n  const { state } = useContext(Store);\n  const { userInfo } = state;\n\n  const [\n    { loading, error, order, successPay, loadingDeliver, successDeliver },\n    dispatch,\n  ] = useReducer(reducer, {\n    loading: true,\n    order: {},\n    error: '',\n  });\n  const {\n    shippingAddress,\n    paymentMethod,\n    orderItems,\n    itemsPrice,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    isPaid,\n    paidAt,\n    isDelivered,\n    deliveredAt,\n  } = order;\n\n  useEffect((): any => {\n    if (!userInfo) {\n      return router.push('/login');\n    }\n    const fetchOrder = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await axios.get(`/api/orders/${orderId}`, {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n      }\n    };\n    if (\n      !order._id ||\n      successPay ||\n      successDeliver ||\n      (order._id && order._id !== orderId)\n    ) {\n      fetchOrder();\n      if (successPay) {\n        dispatch({ type: 'PAY_RESET' });\n      }\n      if (successDeliver) {\n        dispatch({ type: 'DELIVER_RESET' });\n      }\n    } else {\n      const loadPaypalScript = async () => {\n        const { data: clientId } = await axios.get('/api/keys/paypal', {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        paypalDispatch({\n          type: 'resetOptions',\n          value: {\n            'client-id': clientId,\n            currency: 'USD',\n          },\n        });\n        paypalDispatch({ type: 'setLoadingStatus', value: 'pending' });\n      };\n      loadPaypalScript();\n    }\n  }, [order, successPay, successDeliver]);\n  const { enqueueSnackbar } = useSnackbar();\n\n  function createOrder(data: any, actions: any) {\n    return actions.order\n      .create({\n        purchase_units: [\n          {\n            amount: { value: totalPrice },\n          },\n        ],\n      })\n      .then((orderID: string) => {\n        return orderID;\n      });\n  }\n  function onApprove(data: any, actions: any) {\n    return actions.order.capture().then(async function (details: string) {\n      try {\n        dispatch({ type: 'PAY_REQUEST' });\n        const { data } = await axios.put(\n          `/api/orders/${order._id}/pay`,\n          details,\n          {\n            headers: { authorization: `Bearer ${userInfo.token}` },\n          }\n        );\n        dispatch({ type: 'PAY_SUCCESS', payload: data });\n        enqueueSnackbar('Order is paid', { variant: 'success' });\n      } catch (err) {\n        dispatch({ type: 'PAY_FAIL', payload: getError(err) });\n        enqueueSnackbar(getError(err), { variant: 'error' });\n      }\n    });\n  }\n\n  function onError(err: any) {\n    enqueueSnackbar(getError(err), { variant: 'error' });\n  }\n\n  async function deliverOrderHandler() {\n    try {\n      dispatch({ type: 'DELIVER_REQUEST' });\n      const { data } = await axios.put(\n        `/api/orders/${order._id}/deliver`,\n        {},\n        {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        }\n      );\n      dispatch({ type: 'DELIVER_SUCCESS', payload: data });\n      enqueueSnackbar('Order is delivered', { variant: 'success' });\n    } catch (err) {\n      dispatch({ type: 'DELIVER_FAIL', payload: getError(err) });\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  }\n\n  return (\n    <Layout title={`Order ${orderId}`}>\n      <Typography component=\"h1\" variant=\"h1\">\n        Order {orderId}\n      </Typography>\n      {loading ? (\n        <CircularProgress />\n      ) : error ? (\n        <Typography className={classes.error}>{error}</Typography>\n      ) : (\n        <Grid container spacing={1}>\n          <Grid item md={9} xs={12}>\n            <Card className={classes.section}>\n              <List>\n                <ListItem>\n                  <Typography component=\"h2\" variant=\"h2\">\n                    Shipping Address\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  {shippingAddress.fullName}, {shippingAddress.address},{' '}\n                  {shippingAddress.city}, {shippingAddress.postalCode},{' '}\n                  {shippingAddress.country}\n                  &nbsp;\n                  {shippingAddress.location && (\n                    <Link\n                      variant=\"button\"\n                      target=\"_new\"\n                      href={`https://maps.google.com?q=${shippingAddress.location.lat},${shippingAddress.location.lng}`}\n                    >\n                      Show On Map\n                    </Link>\n                  )}\n                </ListItem>\n                <ListItem>\n                  Status:{' '}\n                  {isDelivered\n                    ? `delivered at ${deliveredAt}`\n                    : 'not delivered'}\n                </ListItem>\n              </List>\n            </Card>\n            <Card className={classes.section}>\n              <List>\n                <ListItem>\n                  <Typography component=\"h2\" variant=\"h2\">\n                    Payment Method\n                  </Typography>\n                </ListItem>\n                <ListItem>{paymentMethod}</ListItem>\n                <ListItem>\n                  Status: {isPaid ? `paid at ${paidAt}` : 'not paid'}\n                </ListItem>\n              </List>\n            </Card>\n            <Card className={classes.section}>\n              <List>\n                <ListItem>\n                  <Typography component=\"h2\" variant=\"h2\">\n                    Order Items\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <TableContainer>\n                    <Table>\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>Image</TableCell>\n                          <TableCell>Name</TableCell>\n                          <TableCell align=\"right\">Quantity</TableCell>\n                          <TableCell align=\"right\">Price</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {orderItems.map((item: IProduct) => (\n                          <TableRow key={item._id}>\n                            <TableCell>\n                              <NextLink href={`/product/${item.slug}`} passHref>\n                                <Link>\n                                  <img\n                                    src={item.image_url}\n                                    alt={item.name}\n                                    width={50}\n                                    height={50}\n                                  ></img>\n                                </Link>\n                              </NextLink>\n                            </TableCell>\n\n                            <TableCell>\n                              <NextLink href={`/product/${item.slug}`} passHref>\n                                <Link>\n                                  <Typography>{item.name}</Typography>\n                                </Link>\n                              </NextLink>\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <Typography>{item.quantity}</Typography>\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <Typography>${item.price}</Typography>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </ListItem>\n              </List>\n            </Card>\n          </Grid>\n          <Grid item md={3} xs={12}>\n            <Card className={classes.section}>\n              <List>\n                <ListItem>\n                  <Typography variant=\"h2\">Order Summary</Typography>\n                </ListItem>\n                <ListItem>\n                  <Grid container>\n                    <Grid item xs={6}>\n                      <Typography>Items:</Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Typography align=\"right\">${itemsPrice}</Typography>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Grid container>\n                    <Grid item xs={6}>\n                      <Typography>Tax:</Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Typography align=\"right\">${taxPrice}</Typography>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Grid container>\n                    <Grid item xs={6}>\n                      <Typography>Shipping:</Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Typography align=\"right\">${shippingPrice}</Typography>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Grid container>\n                    <Grid item xs={6}>\n                      <Typography>\n                        <strong>Total:</strong>\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Typography align=\"right\">\n                        <strong>${totalPrice}</strong>\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                {!isPaid && (\n                  <ListItem>\n                    {isPending ? (\n                      <CircularProgress />\n                    ) : (\n                      <div className={classes.fullWidth}>\n                        <PayPalButtons\n                          createOrder={createOrder}\n                          onApprove={onApprove}\n                          onError={onError}\n                        ></PayPalButtons>\n                      </div>\n                    )}\n                  </ListItem>\n                )}\n                {userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                  <ListItem>\n                    {loadingDeliver && <CircularProgress />}\n                    <Button\n                      fullWidth\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={deliverOrderHandler}\n                    >\n                      Deliver Order\n                    </Button>\n                  </ListItem>\n                )}\n              </List>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n    </Layout>\n  );\n}\n\nexport async function getServerSideProps({ params }: any) {\n  return { props: { params } };\n}\n\nexport default dynamic(() => Promise.resolve(Order), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/order-history.tsx",["254"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport {\n  CircularProgress,\n  Grid,\n  List,\n  ListItem,\n  TableContainer,\n  Typography,\n  Card,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Button,\n  ListItemText,\n} from '@material-ui/core';\nimport { getError } from '../utils/error';\nimport { Store } from '../utils/Store';\nimport Layout from '../components/Layout';\nimport useStyles from '../utils/styles';\ninterface Order {\n  _id: string;\n  totalPrice: number;\n  createdAt: string;\n  paidAt: string;\n  deliveredAt: string;\n  isPaid: boolean;\n  isDelivered: boolean;\n}\ninterface LocalState {\n  loading: boolean;\n  orders: Order;\n}\nconst reducer = (state: LocalState, action: any): any => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state, loading: true, error: '' };\n    case 'FETCH_SUCCESS':\n      return { ...state, loading: false, orders: action.payload, error: '' };\n    case 'FETCH_FAIL':\n      return { ...state, loading: false, error: action.payload };\n    default:\n      state;\n  }\n};\n\nfunction OrderHistory() {\n  const { state } = useContext(Store);\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  const [{ loading, error, orders }, dispatch] = useReducer(reducer, {\n    loading: true,\n    orders: [],\n    error: '',\n  });\n\n  useEffect(() => {\n    if (!userInfo) {\n      router.push('/login');\n    }\n    const fetchOrders = async () => {\n      try {\n        dispatch({ type: 'FETCH_REQUEST' });\n        const { data } = await axios.get(`/api/orders/history`, {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n      } catch (err) {\n        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\n      }\n    };\n    fetchOrders();\n  }, []);\n  return (\n    <Layout title=\"Order History\">\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/profile\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"User Profile\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/order-history\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"Order History\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h1\" variant=\"h1\">\n                  Order History\n                </Typography>\n              </ListItem>\n              <ListItem>\n                {loading ? (\n                  <CircularProgress />\n                ) : error ? (\n                  <Typography className={classes.error}>{error}</Typography>\n                ) : (\n                  <TableContainer>\n                    <Table>\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>ID</TableCell>\n                          <TableCell>DATE</TableCell>\n                          <TableCell>TOTAL</TableCell>\n                          <TableCell>PAID</TableCell>\n                          <TableCell>DELIVERED</TableCell>\n                          <TableCell>ACTION</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {orders.map((order: Order) => (\n                          <TableRow key={order._id}>\n                            <TableCell>{order._id.substring(20, 24)}</TableCell>\n                            <TableCell>{order.createdAt}</TableCell>\n                            <TableCell>${order.totalPrice}</TableCell>\n                            <TableCell>\n                              {order.isPaid\n                                ? `paid at ${order.paidAt}`\n                                : 'not paid'}\n                            </TableCell>\n                            <TableCell>\n                              {order.isDelivered\n                                ? `delivered at ${order.deliveredAt}`\n                                : 'not delivered'}\n                            </TableCell>\n                            <TableCell>\n                              <NextLink href={`/order/${order._id}`} passHref>\n                                <Button variant=\"contained\">Details</Button>\n                              </NextLink>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default dynamic(() => Promise.resolve(OrderHistory), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/payment.tsx",["255"],[],"import Cookies from 'js-cookie';\nimport { useRouter } from 'next/router';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Store, ActionKindPayAny } from '../utils/Store';\nimport Layout from '../components/Layout';\nimport CheckoutWizard from '../components/CheckoutWizard';\nimport useStyles from '../utils/styles';\nimport {\n  Button,\n  FormControl,\n  FormControlLabel,\n  List,\n  ListItem,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\n\nexport default function Payment() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const classes = useStyles();\n  const router = useRouter();\n  const [paymentMethod, setPaymentMethod] = useState('');\n  const { state, dispatch } = useContext(Store);\n  const {\n    cart: { shippingAddress },\n  } = state;\n  useEffect(() => {\n    if (!shippingAddress.address) {\n      router.push('/shipping');\n    } else {\n      setPaymentMethod(Cookies.get('paymentMethod') || '');\n    }\n  }, []);\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    closeSnackbar();\n    e.preventDefault();\n    if (!paymentMethod) {\n      enqueueSnackbar('Payment method is required', { variant: 'error' });\n    } else {\n      dispatch({\n        type: ActionKindPayAny.SAVE_PAYMENT_METHOD,\n        payload: paymentMethod,\n      });\n      Cookies.set('paymentMethod', paymentMethod);\n      router.push('/placeorder');\n    }\n  };\n  return (\n    <Layout title=\"Payment Method\">\n      <CheckoutWizard activeStep={2}></CheckoutWizard>\n      <form className={classes.form} onSubmit={submitHandler}>\n        <Typography component=\"h1\" variant=\"h1\">\n          Payment Method\n        </Typography>\n        <List>\n          <ListItem>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                aria-label=\"Payment Method\"\n                name=\"paymentMethod\"\n                value={paymentMethod}\n                onChange={(e) => setPaymentMethod(e.target.value)}\n              >\n                <FormControlLabel\n                  label=\"PayPal\"\n                  value=\"PayPal\"\n                  control={<Radio />}\n                ></FormControlLabel>\n                <FormControlLabel\n                  label=\"Stripe\"\n                  value=\"Stripe\"\n                  control={<Radio />}\n                ></FormControlLabel>\n                <FormControlLabel\n                  label=\"Cash\"\n                  value=\"Cash\"\n                  control={<Radio />}\n                ></FormControlLabel>\n              </RadioGroup>\n            </FormControl>\n          </ListItem>\n          <ListItem>\n            <Button fullWidth type=\"submit\" variant=\"contained\" color=\"primary\">\n              Continue\n            </Button>\n          </ListItem>\n          <ListItem>\n            <Button\n              fullWidth\n              type=\"button\"\n              variant=\"contained\"\n              onClick={() => router.push('/shipping')}\n            >\n              Back\n            </Button>\n          </ListItem>\n        </List>\n      </form>\n    </Layout>\n  );\n}\n","/home/dteq/Documents/E-Commerce/eshop/pages/placeorder.tsx",["256","257"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport Layout from '../components/Layout';\nimport { Store, ActionKindNopay } from '../utils/Store';\nimport NextLink from 'next/link';\nimport { getError } from '../utils/error';\n\nimport {\n  Grid,\n  TableContainer,\n  Table,\n  Typography,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Link,\n  CircularProgress,\n  Button,\n  Card,\n  List,\n  ListItem,\n} from '@material-ui/core';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport useStyles from '../utils/styles';\nimport CheckoutWizard from '../components/CheckoutWizard';\nimport { useSnackbar } from 'notistack';\nimport Cookies from 'js-cookie';\n\nfunction PlaceOrder() {\n  const classes = useStyles();\n  const router = useRouter();\n  const { state, dispatch } = useContext(Store);\n  const {\n    userInfo,\n    cart: { cartItems, shippingAddress, paymentMethod },\n  } = state;\n  const round2 = (num: number) => Math.round(num * 100 + Number.EPSILON) / 100; // 123.456 => 123.46\n  const itemsPrice = round2(\n    cartItems.reduce((a, c) => a + c.price * c.quantity, 0)\n  );\n  const shippingPrice = itemsPrice > 50000 ? 0 : 15;\n  const taxPrice = round2(itemsPrice * 0.15);\n  const totalPrice = round2(itemsPrice + shippingPrice + taxPrice);\n\n  useEffect(() => {\n    if (!paymentMethod) {\n      router.push('/payment');\n    }\n    if (cartItems.length === 0) {\n      router.push('/cart');\n    }\n  }, []);\n  const { closeSnackbar, enqueueSnackbar } = useSnackbar();\n  const [loading, setLoading] = useState(false);\n  const placeOrderHandler = async () => {\n    closeSnackbar();\n    try {\n      setLoading(true);\n      const { data } = await axios.post(\n        '/api/orders',\n        {\n          orderItems: cartItems,\n          shippingAddress,\n          paymentMethod,\n          itemsPrice,\n          shippingPrice,\n          taxPrice,\n          totalPrice,\n        },\n        {\n          headers: {\n            authorization: `Bearer ${userInfo.token}`,\n          },\n        }\n      );\n      dispatch({ type: ActionKindNopay.CART_CLEAR });\n      Cookies.remove('cartItems');\n      setLoading(false);\n      router.push(`/order/${data._id}`);\n    } catch (err) {\n      setLoading(false);\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  return (\n    <Layout title=\"Place Order\">\n      <CheckoutWizard activeStep={3}></CheckoutWizard>\n      <Typography component=\"h1\" variant=\"h1\">\n        Place Order\n      </Typography>\n\n      <Grid container spacing={1}>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h2\" variant=\"h2\">\n                  Shipping Address\n                </Typography>\n              </ListItem>\n              <ListItem>\n                {shippingAddress.fullName}, {shippingAddress.address},{' '}\n                {shippingAddress.city}, {shippingAddress.postalCode},{' '}\n                {shippingAddress.country}\n              </ListItem>\n            </List>\n          </Card>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h2\" variant=\"h2\">\n                  Payment Method\n                </Typography>\n              </ListItem>\n              <ListItem>{paymentMethod}</ListItem>\n            </List>\n          </Card>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h2\" variant=\"h2\">\n                  Order Items\n                </Typography>\n              </ListItem>\n              <ListItem>\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Image</TableCell>\n                        <TableCell>Name</TableCell>\n                        <TableCell align=\"right\">Quantity</TableCell>\n                        <TableCell align=\"right\">Price</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {cartItems.map((item) => (\n                        <TableRow key={item._id}>\n                          <TableCell>\n                            <NextLink href={`/product/${item.slug}`} passHref>\n                              <Link>\n                                <img\n                                  src={item.image_url}\n                                  alt={item.name}\n                                  width={50}\n                                  height={50}\n                                ></img>\n                              </Link>\n                            </NextLink>\n                          </TableCell>\n\n                          <TableCell>\n                            <NextLink href={`/product/${item.slug}`} passHref>\n                              <Link>\n                                <Typography>{item.name}</Typography>\n                              </Link>\n                            </NextLink>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <Typography>{item.quantity}</Typography>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <Typography>&#8358;{item.price}</Typography>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography variant=\"h2\">Order Summary</Typography>\n              </ListItem>\n              <ListItem>\n                <Grid container>\n                  <Grid item xs={6}>\n                    <Typography>Items:</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography align=\"right\">&#8358;{itemsPrice}</Typography>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem>\n                <Grid container>\n                  <Grid item xs={6}>\n                    <Typography>Tax:</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography align=\"right\">&#8358;{taxPrice}</Typography>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem>\n                <Grid container>\n                  <Grid item xs={6}>\n                    <Typography>Shipping:</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography align=\"right\">\n                      &#8358;{shippingPrice}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem>\n                <Grid container>\n                  <Grid item xs={6}>\n                    <Typography>\n                      <strong>Total:</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography align=\"right\">\n                      <strong>&#8358;{totalPrice}</strong>\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem>\n                <Button\n                  onClick={placeOrderHandler}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  fullWidth\n                >\n                  Place Order\n                </Button>\n              </ListItem>\n              {loading && (\n                <ListItem>\n                  <CircularProgress />\n                </ListItem>\n              )}\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default dynamic(() => Promise.resolve(PlaceOrder), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/product/[slug].tsx",["258","259"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport NextLink from 'next/link';\nimport {\n  Grid,\n  Link,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  TextField,\n  CircularProgress,\n} from '@material-ui/core';\nimport Rating from '@material-ui/lab/Rating';\nimport Layout from '../../components/Layout';\nimport useStyles from '../../utils/styles';\nimport Product, { IUser } from '../../models/Product';\nimport dbConnect, { convertDocToObj } from '../../utils/db';\nimport axios from 'axios';\nimport { Store, ActionKindPayCart, IProduct } from '../../utils/Store';\nimport { getError } from '../../utils/error';\nimport { useRouter } from 'next/router';\nimport { useSnackbar } from 'notistack';\n\ninterface Props {\n  product: IProduct;\n}\ninterface Params {\n  slug: string;\n}\ninterface Context {\n  params: Params;\n}\nexport default function ProductScreen(props: Props) {\n  const router = useRouter();\n  const { state, dispatch } = useContext(Store);\n  const { userInfo } = state;\n  const { product } = props;\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [reviews, setReviews] = useState([]);\n  const [rating, setRating] = useState(0);\n  const [comment, setComment] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const submitHandler = async (e: any) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await axios.post(\n        `/api/products/${product._id}/reviews`,\n        {\n          rating,\n          comment,\n        },\n        {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        }\n      );\n      setLoading(false);\n      enqueueSnackbar('Review submitted successfully', { variant: 'success' });\n      fetchReviews();\n    } catch (err) {\n      setLoading(false);\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n\n  const fetchReviews = async () => {\n    try {\n      const { data } = await axios.get(`/api/products/${product._id}/reviews`);\n      setReviews(data);\n    } catch (err) {\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  useEffect(() => {\n    fetchReviews();\n  }, []);\n\n  if (!product) {\n    return <div>Product Not Found</div>;\n  }\n  const addToCartHandler = async () => {\n    const existItem = state.cart.cartItems.find((x) => x._id === product._id);\n    const quantity = existItem ? existItem.quantity + 1 : 1;\n    const { data } = await axios.get(`/api/products/${product._id}`);\n    if (data.countInStock < quantity) {\n      window.alert('Sorry. Product is out of stock');\n      return;\n    }\n    dispatch({\n      type: ActionKindPayCart.CART_ADD_ITEM,\n      payload: { ...product, quantity },\n    });\n    router.push('/cart');\n  };\n\n  return (\n    <Layout title={product.name} description={product.description}>\n      <div className={classes.section}>\n        <NextLink href=\"/\" passHref>\n          <Link>\n            <Typography>back to products</Typography>\n          </Link>\n        </NextLink>\n      </div>\n      <Grid container spacing={1}>\n        <Grid item md={6} xs={12}>\n          <img\n            src={product.image_url}\n            alt={product.name}\n            width={640}\n            height={640}\n          ></img>\n        </Grid>\n        <Grid item md={3} xs={12}>\n          <List>\n            <ListItem>\n              <Typography component=\"h1\" variant=\"h1\">\n                {product.name}\n              </Typography>\n            </ListItem>\n            <ListItem>\n              <Typography>Category: {product.category}</Typography>\n            </ListItem>\n            <ListItem>\n              <Rating value={product.rating} readOnly></Rating>\n              <Link href=\"#reviews\">\n                <Typography>({product.numReviews} reviews)</Typography>\n              </Link>\n            </ListItem>\n            <ListItem>\n              <Typography> Description: {product.description}</Typography>\n            </ListItem>\n          </List>\n        </Grid>\n        <Grid item md={3} xs={12}>\n          <Card>\n            <List>\n              <ListItem>\n                <Grid container>\n                  <Grid item xs={6}>\n                    <Typography>Price</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography>${product.price}</Typography>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem>\n                <Grid container>\n                  <Grid item xs={6}>\n                    <Typography>Status</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography>\n                      {product.countInStock > 0 ? 'In stock' : 'Unavailable'}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem>\n                <Button\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={addToCartHandler}\n                >\n                  Add to cart\n                </Button>\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Customer Reviews</Typography>\n        </ListItem>\n        {reviews.length === 0 && <ListItem>No review</ListItem>}\n        {reviews.map((review: IUser) => (\n          <ListItem key={review._id}>\n            <Grid container>\n              <Grid item className={classes.reviewItem}>\n                <Typography>\n                  <strong>{review.name}</strong>\n                </Typography>\n                <Typography>{review.createdAt.substring(0, 10)}</Typography>\n              </Grid>\n              <Grid item>\n                <Rating value={review.rating} readOnly></Rating>\n                <Typography>{review.comment}</Typography>\n              </Grid>\n            </Grid>\n          </ListItem>\n        ))}\n        <ListItem>\n          {userInfo ? (\n            <form onSubmit={submitHandler} className={classes.reviewForm}>\n              <List>\n                <ListItem>\n                  <Typography variant=\"h2\">Leave your review</Typography>\n                </ListItem>\n                <ListItem>\n                  <TextField\n                    multiline\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"review\"\n                    label=\"Enter comment\"\n                    value={comment}\n                    onChange={(e) => setComment(e.target.value)}\n                  />\n                </ListItem>\n                <ListItem>\n                  <Rating\n                    name=\"simple-controlled\"\n                    value={rating}\n                    onChange={(e: any) => setRating(e.target.value)}\n                  />\n                </ListItem>\n                <ListItem>\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Submit\n                  </Button>\n\n                  {loading && <CircularProgress></CircularProgress>}\n                </ListItem>\n              </List>\n            </form>\n          ) : (\n            <Typography variant=\"h2\">\n              Please{' '}\n              <Link href={`/login?redirect=/product/${product.slug}`}>\n                login\n              </Link>{' '}\n              to write a review\n            </Typography>\n          )}\n        </ListItem>\n      </List>\n    </Layout>\n  );\n}\n\nexport async function getServerSideProps(context: Context) {\n  const { params } = context;\n  const { slug } = params;\n\n  await dbConnect();\n  const product = await Product.findOne({ slug }, '-reviews').lean();\n\n  return {\n    props: {\n      product: convertDocToObj(product),\n    },\n  };\n}\n","/home/dteq/Documents/E-Commerce/eshop/pages/profile.tsx",["260"],[],"import axios from 'axios';\nimport dynamic from 'next/dynamic';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useEffect, useContext } from 'react';\nimport {\n  Grid,\n  List,\n  ListItem,\n  Typography,\n  Card,\n  Button,\n  ListItemText,\n  TextField,\n} from '@material-ui/core';\nimport { getError } from '../utils/error';\nimport { Store, ActionKindPayAny } from '../utils/Store';\nimport Layout from '../components/Layout';\nimport useStyles from '../utils/styles';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useSnackbar } from 'notistack';\nimport Cookies from 'js-cookie';\nfunction Profile() {\n  const { state, dispatch } = useContext(Store);\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const router = useRouter();\n  const classes = useStyles();\n  const { userInfo } = state;\n\n  useEffect(() => {\n    if (!userInfo) {\n      router.push('/login');\n    }\n    setValue('name', userInfo.name);\n    setValue('email', userInfo.email);\n  }, []);\n  const submitHandler = async ({\n    name,\n    email,\n    password,\n    confirmPassword,\n  }: any) => {\n    closeSnackbar();\n    if (password !== confirmPassword) {\n      enqueueSnackbar(\"Passwords don't match\", { variant: 'error' });\n      return;\n    }\n    try {\n      const { data } = await axios.put(\n        '/api/users/profile',\n        {\n          name,\n          email,\n          password,\n        },\n        { headers: { authorization: `Bearer ${userInfo.token}` } }\n      );\n      dispatch({ type: ActionKindPayAny.USER_LOGIN, payload: data });\n      Cookies.set('userInfo', data);\n\n      enqueueSnackbar('Profile updated successfully', { variant: 'success' });\n    } catch (err) {\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  return (\n    <Layout title=\"Profile\">\n      <Grid container spacing={1}>\n        <Grid item md={3} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <NextLink href=\"/profile\" passHref>\n                <ListItem selected button component=\"a\">\n                  <ListItemText primary=\"User Profile\"></ListItemText>\n                </ListItem>\n              </NextLink>\n              <NextLink href=\"/order-history\" passHref>\n                <ListItem button component=\"a\">\n                  <ListItemText primary=\"Order History\"></ListItemText>\n                </ListItem>\n              </NextLink>\n            </List>\n          </Card>\n        </Grid>\n        <Grid item md={9} xs={12}>\n          <Card className={classes.section}>\n            <List>\n              <ListItem>\n                <Typography component=\"h1\" variant=\"h1\">\n                  Profile\n                </Typography>\n              </ListItem>\n              <ListItem>\n                <form\n                  onSubmit={handleSubmit(submitHandler)}\n                  className={classes.form}\n                >\n                  <List>\n                    <ListItem>\n                      <Controller\n                        name=\"name\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                          minLength: 2,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"name\"\n                            label=\"Name\"\n                            inputProps={{ type: 'name' }}\n                            error={Boolean(errors.name)}\n                            helperText={\n                              errors.name\n                                ? errors.name.type === 'minLength'\n                                  ? 'Name length is more than 1'\n                                  : 'Name is required'\n                                : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"email\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          required: true,\n                          pattern: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email\"\n                            inputProps={{ type: 'email' }}\n                            error={Boolean(errors.email)}\n                            helperText={\n                              errors.email\n                                ? errors.email.type === 'pattern'\n                                  ? 'Email is not valid'\n                                  : 'Email is required'\n                                : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"password\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          validate: (value) =>\n                            value === '' ||\n                            value.length > 5 ||\n                            'Password length is more than 5',\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"password\"\n                            label=\"Password\"\n                            inputProps={{ type: 'password' }}\n                            error={Boolean(errors.password)}\n                            helperText={\n                              errors.password\n                                ? 'Password length is more than 5'\n                                : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Controller\n                        name=\"confirmPassword\"\n                        control={control}\n                        defaultValue=\"\"\n                        rules={{\n                          validate: (value) =>\n                            value === '' ||\n                            value.length > 5 ||\n                            'Confirm Password length is more than 5',\n                        }}\n                        render={({ field }) => (\n                          <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"confirmPassword\"\n                            label=\"Confirm Password\"\n                            inputProps={{ type: 'password' }}\n                            error={Boolean(errors.confirmPassword)}\n                            helperText={\n                              errors.password\n                                ? 'Confirm Password length is more than 5'\n                                : ''\n                            }\n                            {...field}\n                          ></TextField>\n                        )}\n                      ></Controller>\n                    </ListItem>\n                    <ListItem>\n                      <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        fullWidth\n                        color=\"primary\"\n                      >\n                        Update\n                      </Button>\n                    </ListItem>\n                  </List>\n                </form>\n              </ListItem>\n            </List>\n          </Card>\n        </Grid>\n      </Grid>\n    </Layout>\n  );\n}\n\nexport default dynamic(() => Promise.resolve(Profile), { ssr: false });\n","/home/dteq/Documents/E-Commerce/eshop/pages/register.tsx",["261"],[],"import {\n  List,\n  ListItem,\n  Typography,\n  TextField,\n  Button,\n  Link,\n} from '@material-ui/core';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport NextLink from 'next/link';\nimport React, { useContext, useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport { ActionKindPayAny, Store } from '../utils/Store';\nimport useStyles from '../utils/styles';\nimport Cookies from 'js-cookie';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useSnackbar } from 'notistack';\nimport { getError } from '../utils/error';\n\nexport default function Register() {\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const router = useRouter();\n  const redirect = router.query;\n  const { state, dispatch } = useContext(Store);\n  const { userInfo } = state;\n  useEffect(() => {\n    if (userInfo) {\n      router.push('/');\n    }\n  }, []);\n\n  const classes = useStyles();\n  const submitHandler = async ({\n    name,\n    email,\n    password,\n    confirmPassword,\n  }: any) => {\n    closeSnackbar();\n    if (password !== confirmPassword) {\n      enqueueSnackbar(\"Passwords don't match\", { variant: 'error' });\n      return;\n    }\n    try {\n      const { data } = await axios.post('/api/users/register', {\n        name,\n        email,\n        password,\n      });\n      dispatch({ type: ActionKindPayAny.USER_LOGIN, payload: data });\n      Cookies.set('userInfo', data);\n      router.push(redirect || '/');\n    } catch (err) {\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n  return (\n    <Layout title=\"Register\">\n      <form onSubmit={handleSubmit(submitHandler)} className={classes.form}>\n        <Typography component=\"h1\" variant=\"h1\">\n          Register\n        </Typography>\n        <List>\n          <ListItem>\n            <Controller\n              name=\"name\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 2,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"name\"\n                  label=\"Name\"\n                  inputProps={{ type: 'name' }}\n                  error={Boolean(errors.name)}\n                  helperText={\n                    errors.name\n                      ? errors.name.type === 'minLength'\n                        ? 'Name length is more than 1'\n                        : 'Name is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Controller\n              name=\"email\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                pattern: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email\"\n                  inputProps={{ type: 'email' }}\n                  error={Boolean(errors.email)}\n                  helperText={\n                    errors.email\n                      ? errors.email.type === 'pattern'\n                        ? 'Email is not valid'\n                        : 'Email is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Controller\n              name=\"password\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 6,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"password\"\n                  label=\"Password\"\n                  inputProps={{ type: 'password' }}\n                  error={Boolean(errors.password)}\n                  helperText={\n                    errors.password\n                      ? errors.password.type === 'minLength'\n                        ? 'Password length is more than 5'\n                        : 'Password is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Controller\n              name=\"confirmPassword\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 6,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"confirmPassword\"\n                  label=\"Confirm Password\"\n                  inputProps={{ type: 'password' }}\n                  error={Boolean(errors.confirmPassword)}\n                  helperText={\n                    errors.confirmPassword\n                      ? errors.confirmPassword.type === 'minLength'\n                        ? 'Confirm Password length is more than 5'\n                        : 'Confirm  Password is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Button variant=\"contained\" type=\"submit\" fullWidth color=\"primary\">\n              Register\n            </Button>\n          </ListItem>\n          <ListItem>\n            Already have an account? &nbsp;\n            <NextLink href={`/login?redirect=${redirect || '/'}`} passHref>\n              <Link>Login</Link>\n            </NextLink>\n          </ListItem>\n        </List>\n      </form>\n    </Layout>\n  );\n}\n","/home/dteq/Documents/E-Commerce/eshop/pages/search.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/pages/shipping.tsx",["262"],[],"import {\n  List,\n  ListItem,\n  Typography,\n  TextField,\n  Button,\n} from '@material-ui/core';\nimport { useRouter } from 'next/router';\nimport React, { useContext, useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport { Store } from '../utils/Store';\nimport useStyles from '../utils/styles';\nimport Cookies from 'js-cookie';\nimport { Controller, useForm } from 'react-hook-form';\nimport CheckoutWizard from '../components/CheckoutWizard';\nimport { ActionKindPayAny } from '../utils/Store';\n\nexport default function ShipFunc() {\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm();\n  const router = useRouter();\n  const { state, dispatch } = useContext(Store);\n  const {\n    userInfo,\n    cart: { shippingAddress },\n  } = state;\n  const { location } = shippingAddress;\n  useEffect(() => {\n    if (!userInfo) {\n      router.push('/login?redirect=/shipping');\n    }\n    setValue('fullName', shippingAddress.fullName);\n    setValue('address', shippingAddress.address);\n    setValue('city', shippingAddress.city);\n    setValue('postalCode', shippingAddress.postalCode);\n    setValue('country', shippingAddress.country);\n  }, []);\n\n  const classes = useStyles();\n  const submitHandler = ({\n    fullName,\n    address,\n    city,\n    postalCode,\n    country,\n  }: any) => {\n    dispatch({\n      type: ActionKindPayAny.SAVE_SHIPPING_ADDRESS,\n      payload: { fullName, address, city, postalCode, country, location },\n    });\n    Cookies.set('shippingAddress', {\n      fullName,\n      address,\n      city,\n      postalCode,\n      country,\n      location,\n    });\n    router.push('/payment');\n  };\n\n  const chooseLocationHandler = () => {\n    const fullName = getValues('fullName');\n    const address = getValues('address');\n    const city = getValues('city');\n    const postalCode = getValues('postalCode');\n    const country = getValues('country');\n    dispatch({\n      type: ActionKindPayAny.SAVE_SHIPPING_ADDRESS,\n      payload: { fullName, address, city, postalCode, country },\n    });\n    Cookies.set('shippingAddress', {\n      fullName,\n      address,\n      city,\n      postalCode,\n      country,\n      location,\n    });\n    router.push('/map');\n  };\n  return (\n    <Layout title=\"Shipping Address\">\n      <CheckoutWizard activeStep={1} />\n      <form onSubmit={handleSubmit(submitHandler)} className={classes.form}>\n        <Typography component=\"h1\" variant=\"h1\">\n          Shipping Address\n        </Typography>\n        <List>\n          <ListItem>\n            <Controller\n              name=\"fullName\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 2,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"fullName\"\n                  label=\"Full Name\"\n                  error={Boolean(errors.fullName)}\n                  helperText={\n                    errors.fullName\n                      ? errors.fullName.type === 'minLength'\n                        ? 'Full Name length is more than 1'\n                        : 'Full Name is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Controller\n              name=\"address\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 2,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"address\"\n                  label=\"Address\"\n                  error={Boolean(errors.address)}\n                  helperText={\n                    errors.address\n                      ? errors.address.type === 'minLength'\n                        ? 'Address length is more than 1'\n                        : 'Address is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Controller\n              name=\"city\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 2,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"city\"\n                  label=\"City\"\n                  error={Boolean(errors.city)}\n                  helperText={\n                    errors.city\n                      ? errors.city.type === 'minLength'\n                        ? 'City length is more than 1'\n                        : 'City is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Controller\n              name=\"postalCode\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 2,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"postalCode\"\n                  label=\"Postal Code\"\n                  error={Boolean(errors.postalCode)}\n                  helperText={\n                    errors.postalCode\n                      ? errors.postalCode.type === 'minLength'\n                        ? 'Postal Code length is more than 1'\n                        : 'Postal Code is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Controller\n              name=\"country\"\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                required: true,\n                minLength: 2,\n              }}\n              render={({ field }) => (\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"country\"\n                  label=\"Country\"\n                  error={Boolean(errors.country)}\n                  helperText={\n                    errors.country\n                      ? errors.country.type === 'minLength'\n                        ? 'Country length is more than 1'\n                        : 'Country is required'\n                      : ''\n                  }\n                  {...field}\n                ></TextField>\n              )}\n            ></Controller>\n          </ListItem>\n          <ListItem>\n            <Button\n              variant=\"contained\"\n              type=\"button\"\n              onClick={chooseLocationHandler}\n            >\n              Choose on map\n            </Button>\n            <Typography>\n              {/* {location.lat && `${location.lat}, ${location.lat}`} */}\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <Button variant=\"contained\" type=\"submit\" fullWidth color=\"primary\">\n              Continue\n            </Button>\n          </ListItem>\n        </List>\n      </form>\n    </Layout>\n  );\n}\n","/home/dteq/Documents/E-Commerce/eshop/components/CheckoutWizard.tsx",[],[],"/home/dteq/Documents/E-Commerce/eshop/components/Layout.tsx",["263"],[],"import React, { useContext } from 'react';\nimport Head from 'next/head';\nimport NextLink from 'next/link';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Container,\n  Link,\n  createTheme,\n  ThemeProvider,\n  CssBaseline,\n  Switch,\n  Badge,\n  Button,\n  Menu,\n  MenuItem,\n  Box,\n  IconButton,\n  Drawer,\n  List,\n  ListItem,\n  Divider,\n  ListItemText,\n  InputBase,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SearchIcon from '@material-ui/icons/Search';\nimport useStyles from '../utils/styles';\nimport { Store, ActionKindNopay } from '../utils/Store';\nimport { getError } from '../utils/error';\nimport Cookies from 'js-cookie';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useSnackbar } from 'notistack';\nimport axios from 'axios';\nimport { useEffect } from 'react';\n\nexport default function Layout({ title, description, children }: any) {\n  const router = useRouter();\n  const { state, dispatch } = useContext(Store);\n  const { darkMode, cart, userInfo } = state;\n  const theme = createTheme({\n    typography: {\n      h1: {\n        fontSize: '1.6rem',\n        fontWeight: 400,\n        margin: '1rem 0',\n      },\n      h2: {\n        fontSize: '1.4rem',\n        fontWeight: 400,\n        margin: '1rem 0',\n      },\n    },\n    palette: {\n      type: darkMode ? 'dark' : 'light',\n      primary: {\n        main: '#f0c000',\n      },\n      secondary: {\n        main: '#208080',\n      },\n    },\n  });\n  const classes = useStyles();\n\n  const [sidbarVisible, setSidebarVisible] = useState(false);\n  const sidebarOpenHandler = () => {\n    setSidebarVisible(true);\n  };\n  const sidebarCloseHandler = () => {\n    setSidebarVisible(false);\n  };\n\n  const [categories, setCategories] = useState([]);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const fetchCategories = async () => {\n    try {\n      const { data } = await axios.get(`/api/products/categories`);\n      setCategories(data);\n    } catch (err) {\n      enqueueSnackbar(getError(err), { variant: 'error' });\n    }\n  };\n\n  const [query, setQuery] = useState('');\n  const queryChangeHandler = (e: any) => {\n    setQuery(e.target.value);\n  };\n  const submitHandler = (e: any) => {\n    e.preventDefault();\n    router.push(`/search?query=${query}`);\n  };\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  const darkModeChangeHandler = () => {\n    dispatch({\n      type: darkMode\n        ? ActionKindNopay.DARK_MODE_OFF\n        : ActionKindNopay.DARK_MODE_ON,\n    });\n    const newDarkMode = !darkMode;\n    Cookies.set('darkMode', newDarkMode ? 'ON' : 'OFF');\n  };\n  const [anchorEl, setAnchorEl] = useState(null);\n  const loginClickHandler = (e: any) => {\n    setAnchorEl(e.currentTarget);\n  };\n  const loginMenuCloseHandler = (e: any, redirect: any) => {\n    setAnchorEl(null);\n    if (redirect) {\n      router.push(redirect);\n    }\n  };\n  const logoutClickHandler = () => {\n    setAnchorEl(null);\n    dispatch({ type: ActionKindNopay.USER_LOGOUT });\n    Cookies.remove('userInfo');\n    Cookies.remove('cartItems');\n    Cookies.remove('shippinhAddress');\n    Cookies.remove('paymentMethod');\n    router.push('/');\n  };\n  return (\n    <div>\n      <Head>\n        <title>{title ? `${title} - D2MAT` : 'D2MAT'}</title>\n        {description && <meta name=\"description\" content={description}></meta>}\n      </Head>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar position=\"static\" className={classes.navbar}>\n          <Toolbar className={classes.toolbar}>\n            <Box display=\"flex\" alignItems=\"center\">\n              <IconButton\n                edge=\"start\"\n                aria-label=\"open drawer\"\n                onClick={sidebarOpenHandler}\n                className={classes.menuButton}\n              >\n                <MenuIcon className={classes.navbarButton} />\n              </IconButton>\n              <NextLink href=\"/\" passHref>\n                <Link>\n                  <Typography className={classes.brand}>D2MAT</Typography>\n                </Link>\n              </NextLink>\n            </Box>\n            <Drawer\n              anchor=\"left\"\n              open={sidbarVisible}\n              onClose={sidebarCloseHandler}\n            >\n              <List>\n                <ListItem>\n                  <Box\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    justifyContent=\"space-between\"\n                  >\n                    <Typography>Shopping by category</Typography>\n                    <IconButton\n                      aria-label=\"close\"\n                      onClick={sidebarCloseHandler}\n                    >\n                      <CancelIcon />\n                    </IconButton>\n                  </Box>\n                </ListItem>\n                <Divider light />\n                {categories.map((category) => (\n                  <NextLink\n                    key={category}\n                    href={`/search?category=${category}`}\n                    passHref\n                  >\n                    <ListItem\n                      button\n                      component=\"a\"\n                      onClick={sidebarCloseHandler}\n                    >\n                      <ListItemText primary={category}></ListItemText>\n                    </ListItem>\n                  </NextLink>\n                ))}\n              </List>\n            </Drawer>\n\n            <div className={classes.searchSection}>\n              <form onSubmit={submitHandler} className={classes.searchForm}>\n                <InputBase\n                  name=\"query\"\n                  className={classes.searchInput}\n                  placeholder=\"Search products\"\n                  onChange={queryChangeHandler}\n                />\n                <IconButton\n                  type=\"submit\"\n                  className={classes.iconButton}\n                  aria-label=\"search\"\n                >\n                  <SearchIcon />\n                </IconButton>\n              </form>\n            </div>\n            <div>\n              <Switch\n                checked={darkMode}\n                onChange={darkModeChangeHandler}\n              ></Switch>\n              <NextLink href=\"/cart\" passHref>\n                <Link>\n                  <Typography component=\"span\">\n                    {cart.cartItems.length > 0 ? (\n                      <Badge\n                        color=\"secondary\"\n                        badgeContent={cart.cartItems.length}\n                      >\n                        Cart\n                      </Badge>\n                    ) : (\n                      'Cart'\n                    )}\n                  </Typography>\n                </Link>\n              </NextLink>\n              {userInfo ? (\n                <>\n                  <Button\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={loginClickHandler}\n                    className={classes.navbarButton}\n                  >\n                    {userInfo.name}\n                  </Button>\n                  <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={loginMenuCloseHandler}\n                  >\n                    <MenuItem\n                      onClick={(e: any) => loginMenuCloseHandler(e, '/profile')}\n                    >\n                      Profile\n                    </MenuItem>\n                    <MenuItem\n                      onClick={(e: any) =>\n                        loginMenuCloseHandler(e, '/order-history')\n                      }\n                    >\n                      Order Hisotry\n                    </MenuItem>\n                    {userInfo.isAdmin && (\n                      <MenuItem\n                        onClick={(e: any) =>\n                          loginMenuCloseHandler(e, '/admin/dashboard')\n                        }\n                      >\n                        Admin Dashboard\n                      </MenuItem>\n                    )}\n                    <MenuItem onClick={logoutClickHandler}>Logout</MenuItem>\n                  </Menu>\n                </>\n              ) : (\n                <NextLink href=\"/login\" passHref>\n                  <Link>\n                    <Typography component=\"span\">Login</Typography>\n                  </Link>\n                </NextLink>\n              )}\n            </div>\n          </Toolbar>\n        </AppBar>\n        <Container className={classes.main}>{children}</Container>\n        <footer className={classes.footer}>\n          <Typography>All rights reserved. D2MAT.</Typography>\n        </footer>\n      </ThemeProvider>\n    </div>\n  );\n}\n","/home/dteq/Documents/E-Commerce/eshop/components/ProductItem.tsx",[],[],{"ruleId":"264","severity":1,"message":"265","line":83,"column":6,"nodeType":"266","endLine":83,"endColumn":8,"suggestions":"267"},{"ruleId":"264","severity":1,"message":"265","line":81,"column":6,"nodeType":"266","endLine":81,"endColumn":8,"suggestions":"268"},{"ruleId":"264","severity":1,"message":"269","line":101,"column":6,"nodeType":"266","endLine":101,"endColumn":8,"suggestions":"270"},{"ruleId":"264","severity":1,"message":"265","line":91,"column":6,"nodeType":"266","endLine":91,"endColumn":21,"suggestions":"271"},{"ruleId":"264","severity":1,"message":"272","line":93,"column":6,"nodeType":"266","endLine":93,"endColumn":8,"suggestions":"273"},{"ruleId":"264","severity":1,"message":"265","line":89,"column":6,"nodeType":"266","endLine":89,"endColumn":21,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":83,"column":29,"nodeType":"277","endLine":87,"endColumn":30},{"ruleId":"264","severity":1,"message":"278","line":41,"column":6,"nodeType":"266","endLine":41,"endColumn":8,"suggestions":"279"},{"ruleId":"264","severity":1,"message":"280","line":136,"column":6,"nodeType":"266","endLine":136,"endColumn":41,"suggestions":"281"},{"ruleId":"275","severity":1,"message":"276","line":273,"column":35,"nodeType":"277","endLine":278,"endColumn":36},{"ruleId":"264","severity":1,"message":"265","line":80,"column":6,"nodeType":"266","endLine":80,"endColumn":8,"suggestions":"282"},{"ruleId":"264","severity":1,"message":"283","line":35,"column":6,"nodeType":"266","endLine":35,"endColumn":8,"suggestions":"284"},{"ruleId":"264","severity":1,"message":"285","line":54,"column":6,"nodeType":"266","endLine":54,"endColumn":8,"suggestions":"286"},{"ruleId":"275","severity":1,"message":"276","line":144,"column":33,"nodeType":"277","endLine":149,"endColumn":34},{"ruleId":"264","severity":1,"message":"287","line":80,"column":6,"nodeType":"266","endLine":80,"endColumn":8,"suggestions":"288"},{"ruleId":"275","severity":1,"message":"276","line":111,"column":11,"nodeType":"277","endLine":116,"endColumn":12},{"ruleId":"264","severity":1,"message":"289","line":42,"column":6,"nodeType":"266","endLine":42,"endColumn":8,"suggestions":"290"},{"ruleId":"264","severity":1,"message":"265","line":36,"column":6,"nodeType":"266","endLine":36,"endColumn":8,"suggestions":"291"},{"ruleId":"264","severity":1,"message":"292","line":42,"column":6,"nodeType":"266","endLine":42,"endColumn":8,"suggestions":"293"},{"ruleId":"264","severity":1,"message":"294","line":100,"column":6,"nodeType":"266","endLine":100,"endColumn":8,"suggestions":"295"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'router' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["296"],["297"],"React Hook useEffect has missing dependencies: 'productId', 'router', 'setValue', and 'userInfo'. Either include them or remove the dependency array.",["298"],["299"],"React Hook useEffect has missing dependencies: 'router', 'setValue', 'userId', and 'userInfo'. Either include them or remove the dependency array.",["300"],["301"],"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","React Hook useEffect has missing dependencies: 'enqueueSnackbar', 'getUserCurrentLocation', and 'userInfo.token'. Either include them or remove the dependency array.",["302"],"React Hook useEffect has missing dependencies: 'orderId', 'paypalDispatch', 'router', and 'userInfo'. Either include them or remove the dependency array.",["303"],["304"],"React Hook useEffect has missing dependencies: 'router' and 'shippingAddress.address'. Either include them or remove the dependency array.",["305"],"React Hook useEffect has missing dependencies: 'cartItems.length', 'paymentMethod', and 'router'. Either include them or remove the dependency array.",["306"],"React Hook useEffect has a missing dependency: 'fetchReviews'. Either include it or remove the dependency array.",["307"],"React Hook useEffect has missing dependencies: 'router', 'setValue', and 'userInfo'. Either include them or remove the dependency array.",["308"],["309"],"React Hook useEffect has missing dependencies: 'router', 'setValue', 'shippingAddress.address', 'shippingAddress.city', 'shippingAddress.country', 'shippingAddress.fullName', 'shippingAddress.postalCode', and 'userInfo'. Either include them or remove the dependency array.",["310"],"React Hook useEffect has a missing dependency: 'fetchCategories'. Either include it or remove the dependency array.",["311"],{"desc":"312","fix":"313"},{"desc":"312","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"317","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"312","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"312","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [router, userInfo]",{"range":"340","text":"341"},{"range":"342","text":"341"},"Update the dependencies array to be: [productId, router, setValue, userInfo]",{"range":"343","text":"344"},"Update the dependencies array to be: [router, successDelete, userInfo]",{"range":"345","text":"346"},"Update the dependencies array to be: [router, setValue, userId, userInfo]",{"range":"347","text":"348"},{"range":"349","text":"346"},"Update the dependencies array to be: [enqueueSnackbar, getUserCurrentLocation, userInfo.token]",{"range":"350","text":"351"},"Update the dependencies array to be: [order, successPay, successDeliver, userInfo, orderId, router, paypalDispatch]",{"range":"352","text":"353"},{"range":"354","text":"341"},"Update the dependencies array to be: [router, shippingAddress.address]",{"range":"355","text":"356"},"Update the dependencies array to be: [cartItems.length, paymentMethod, router]",{"range":"357","text":"358"},"Update the dependencies array to be: [fetchReviews]",{"range":"359","text":"360"},"Update the dependencies array to be: [router, setValue, userInfo]",{"range":"361","text":"362"},{"range":"363","text":"341"},"Update the dependencies array to be: [router, setValue, shippingAddress.address, shippingAddress.city, shippingAddress.country, shippingAddress.fullName, shippingAddress.postalCode, userInfo]",{"range":"364","text":"365"},"Update the dependencies array to be: [fetchCategories]",{"range":"366","text":"367"},[2037,2039],"[router, userInfo]",[1961,1963],[3106,3108],"[productId, router, setValue, userInfo]",[2557,2572],"[router, successDelete, userInfo]",[2778,2780],"[router, setValue, userId, userInfo]",[2344,2359],[1238,1240],"[enqueueSnackbar, getUserCurrentLocation, userInfo.token]",[3809,3844],"[order, successPay, successDeliver, userInfo, orderId, router, paypalDispatch]",[1983,1985],[1010,1012],"[router, shippingAddress.address]",[1471,1473],"[cartItems.length, paymentMethod, router]",[2144,2146],"[fetchReviews]",[1110,1112],"[router, setValue, userInfo]",[972,974],[1202,1204],"[router, setValue, shippingAddress.address, shippingAddress.city, shippingAddress.country, shippingAddress.fullName, shippingAddress.postalCode, userInfo]",[2370,2372],"[fetchCategories]"]